package main

import (
	"context"
	"testing"

	"github.com/DATA-DOG/go-sqlmock"
	"github.com/jmoiron/sqlx"
	. "github.com/smartystreets/goconvey/convey"
	"weavelab.xyz/monorail/shared/wlib/uuid"
)
func TestGetSms(t *testing.T) {
	expectedSMSID := uuid.NewV4()
	expectedLocationID := uuid.NewV4()

	mockDB, mock, err := sqlmock.New()
	if err != nil {
		t.Fatalf("%v | %s", err, "error creating mock database")
	}

	columns := []string{"id", "locationid"}
	mock.ExpectQuery("^SELECT id, locationid FROM (.+)").
		WillReturnRows(mock.NewRows(columns).AddRow(
			expectedSMSID.String(), expectedLocationID.String()),
		)

	sqlxMockDB := sqlx.NewDb(mockDB, "postgres")

	type fields struct {
		db DBTX
	}
	type args struct {
		ctx context.Context
		id  uuid.UUID
	}
	tests := []struct {
		name 	string
		fields  fields
		args	args
		want	Sms
		wantErr bool
	}{
		{
			name: "returns requested Sms given id",
			args: args{
				ctx: context.Background(),
				id:  expectedSMSID,
			},
			fields: fields{
				db: sqlxMockDB,
			},
		},
	}

	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			Convey("testGetSms", t, func() {
				pg := New(tt.fields.db)

				got, err := pg.GetSms(tt.args.ctx, tt.args.id)
				if tt.wantErr {
					So(err, ShouldBeTrue)
				}

				So(got, ShouldResemble, tt.want)
			})
		})
	}
}
func TestListSms(t *testing.T) {
	expectedSMSID := uuid.NewV4()
	expectedLocationID := uuid.NewV4()

	mockDB, mock, err := sqlmock.New()
	if err != nil {
		t.Fatalf("%v | %s", err, "error creating mock database")
	}

	columns := []string{"id", "locationid"}
	mock.ExpectQuery("^SELECT * FROM (.+)").
		WillReturnRows(mock.NewRows(columns).AddRow(
			expectedSMSID.String(), expectedLocationID.String()),
		)

	sqlxMockDB := sqlx.NewDb(mockDB, "postgres")

	type fields struct {
		db DBTX
	}
	type args struct {
		ctx context.Context
	}
	tests := []struct {
		name 	string
		fields  fields
		args	args
		want	Sms
		wantErr bool
	}{
		{
			name: "returns list of Smses",
			args: args{
				ctx: context.Background(),
			},
			fields: fields{
				db: sqlxMockDB,
			},
		},
	}

	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			Convey("testListSms", t, func() {
				pg := New(tt.fields.db)

				got, err := pg.ListSms(tt.args.ctx)
				if tt.wantErr {
					So(err, ShouldBeTrue)
				}

				So(got, ShouldResemble, tt.want)
			})
		})
	}
}
func TestCreateSms(t *testing.T) {
	expectedLocationID := uuid.NewV4()

	mockDB, mock, err := sqlmock.New()
	if err != nil {
		t.Fatalf("%v | %s", err, "error creating mock database")
	}

	columns := []string{"id", "locationid"}
	mock.ExpectQuery("^INSERT INTO (.+)").
		WillReturnRows(mock.NewRows(columns).AddRow(
			expectedSMSID.String(), expectedLocationID.String()),
		)

	sqlxMockDB := sqlx.NewDb(mockDB, "postgres")

	type fields struct {
		db DBTX
	}
	type args struct {
		ctx context.Context
	}
	tests := []struct {
		name 	string
		fields  fields
		args	args
		want	Sms
		wantErr bool
	}{
		{
			name: "creates Sms given attributes",
			args: args{
				ctx: context.Background(),
			},
			fields: fields{
				db: sqlxMockDB,
			},
		},
	}

	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			Convey("testCreateSms", t, func() {
				pg := New(tt.fields.db)

				got, err := pg.CreateSms(tt.args.ctx)
				if tt.wantErr {
					So(err, ShouldBeTrue)
				}

				So(got, ShouldResemble, tt.want)
			})
		})
	}
}
